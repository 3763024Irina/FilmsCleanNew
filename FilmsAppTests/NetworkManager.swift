import Foundation

final class NetworkManager {
    static let shared = NetworkManager()
    private init() {}

    func dataRequest(urlString: String,
                     session: URLSession = .shared,
                     completion: @escaping (Result<Data, Error>) -> Void) {

        guard let url = URL(string: urlString) else {
            let error = NSError(domain: "NetworkManager", code: 1001, userInfo: [
                NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π URL: \(urlString)"
            ])
            completion(.failure(error))
            return
        }

        print("‚û°Ô∏è –ó–∞–ø—Ä–æ—Å: \(urlString)")

        let task = session.dataTask(with: url) { data, response, error in

            if let error = error {
                print("‚õîÔ∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
                completion(.failure(error))
                return
            }

            guard let httpResponse = response as? HTTPURLResponse else {
                let error = NSError(domain: "NetworkManager", code: 1002, userInfo: [
                    NSLocalizedDescriptionKey: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                ])
                completion(.failure(error))
                return
            }

            print("üì° HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")

            guard (200...299).contains(httpResponse.statusCode) else {
                let error = NSError(domain: "NetworkManager", code: httpResponse.statusCode, userInfo: [
                    NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)"
                ])
                completion(.failure(error))
                return
            }

            guard let data = data else {
                let error = NSError(domain: "NetworkManager", code: 1003, userInfo: [
                    NSLocalizedDescriptionKey: "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                ])
                completion(.failure(error))
                return
            }

            completion(.success(data))
        }

        task.resume()
    }
}
