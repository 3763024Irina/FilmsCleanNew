/*
 1. –ü—Ä–æ–±–ª–µ–º–∞: RealmSwift –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ CocoaPods –∫–∞–∫ XCFramework, –∏ –µ–≥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ (–ø–æ 60‚Äì100 –ú–ë –∫–∞–∂–¥—ã–π) —Ä–µ–∑–∫–æ —Ä–∞–∑–¥—É–≤–∞—é—Ç –≤–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—é Git, –∏–∑-–∑–∞ —á–µ–≥–æ GitHub –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—É—à–∏.
 –†–µ—à–µ–Ω–∏–µ:

 –î–æ–±–∞–≤–∏–ª–∞ –ø–∞–ø–∫—É Pods/ –≤ .gitignore –∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ git rm -r --cached Pods, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞.

 –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ git filter-branch (–∏–ª–∏ BFG Repo-Cleaner), —á—Ç–æ–±—ã ¬´–æ—á–∏—Å—Ç–∏—Ç—å¬ª –ø—Ä–æ—à–ª—ã–µ –∫–æ–º–º–∏—Ç—ã –æ—Ç —Ç—è–∂—ë–ª—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.

 
 –ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: –±–µ–∑ CocoaPods –∏–ª–∏ –±–µ–∑ Realm –Ω–∞–º –±—ã –ø—Ä–∏—à–ª–æ—Å—å –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç —É–¥–æ–±–Ω–æ–≥–æ ORM –∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–±–ª–µ–º—ã –≤–µ—Å–∞ –ª–∏—à—å –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—Ç—Å—è, –Ω–æ –Ω–µ –∏—Å—á–µ–∑–∞—é—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é.
 
 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (@testable import)
 –ü—Ä–æ–±–ª–µ–º–∞: –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–∏—Å–∞—Ç—å unit-—Ç–µ—Å—Ç—ã Xcode –≤—ã–¥–∞–≤–∞–ª –æ—à–∏–±–∫—É

 Module 'FilmsApp' was not compiled for testing
 ‚Äî —Ç–µ—Å—Ç—ã –Ω–µ –≤–∏–¥–µ–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ (internal) —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±–∏—Ä–∞–ª–æ—Å—å –±–µ–∑ —Ñ–ª–∞–≥–∞ -enable-testing.
 –†–µ—à–µ–Ω–∏–µ:

 –í Build Settings —Ç–∞—Ä–≥–µ—Ç–∞ FilmsApp –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Debug –≤–∫–ª—é—á–∏–ª–∏ Enable Testability = Yes.

 –ü–µ—Ä–µ—à–ª–∞ –Ω–∞ —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å .xcworkspace, —á—Ç–æ–±—ã CocoaPods-—Å—Ö–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏—Å—å.

 –í —Å—Ö–µ–º–µ Edit Scheme ‚Üí Test —É–±–µ–¥–∏–ª–∞—Å—å, —á—Ç–æ Build Configuration —Å—Ç–æ–∏—Ç Debug, –∏ —á—Ç–æ –æ–±–∞ —Ç–∞—Ä–≥–µ—Ç–∞ (FilmsApp –∏ FilmsAppTests) —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Å–±–æ—Ä–∫–µ –∏ –≤ —Ç–µ—Å—Ç–∞—Ö.
 –ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: –±–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @testable import –∏ –ø–æ–∫—Ä—ã–≤–∞—Ç—å –∫–æ–¥ internal-–º–µ—Ç–æ–¥–∞–º–∏, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç —à–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ª—é–±—ã—Ö unit-—Ç–µ—Å—Ç–æ–≤.

*/
import Foundation


final class NetworkManager {
    static let shared = NetworkManager()
    private init() {}

    func dataRequest(urlString: String,
                     session: URLSession = .shared,
                     completion: @escaping (Result<Data, Error>) -> Void) {

        guard let url = URL(string: urlString) else {
            let error = NSError(domain: "NetworkManager", code: 1001, userInfo: [
                NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π URL: \(urlString)"
            ])
            completion(.failure(error))
            return
        }

        print("‚û°Ô∏è –ó–∞–ø—Ä–æ—Å: \(urlString)")

        let task = session.dataTask(with: url) { data, response, error in

            if let error = error {
                print("‚õîÔ∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
                completion(.failure(error))
                return
            }

            guard let httpResponse = response as? HTTPURLResponse else {
                let error = NSError(domain: "NetworkManager", code: 1002, userInfo: [
                    NSLocalizedDescriptionKey: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                ])
                completion(.failure(error))
                return
            }

            print("üì° HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")

            guard (200...299).contains(httpResponse.statusCode) else {
                let error = NSError(domain: "NetworkManager", code: httpResponse.statusCode, userInfo: [
                    NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)"
                ])
                completion(.failure(error))
                return
            }

            guard let data = data else {
                let error = NSError(domain: "NetworkManager", code: 1003, userInfo: [
                    NSLocalizedDescriptionKey: "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                ])
                completion(.failure(error))
                return
            }

            completion(.success(data))
        }

        task.resume()
    }
}
