import UIKit
import RealmSwift

class ImageFullscreenViewController: UIViewController, UIScrollViewDelegate {

    // –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:
    var image: UIImage?          // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
    var imageUrl: URL?           // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ URL
    var itemId: Int?             // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Realm, –µ—Å–ª–∏ URL –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å

    // –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL –∏–∑ itemId
    var imageBaseURL: String = "https://image.tmdb.org/t/p/"
    var posterSize: String = "w500"

    private let scrollView = UIScrollView()
    private let imageView = UIImageView()
    private let realm = try! Realm()

    // –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º NSURL –∫–ª—é—á, —Ç–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
    static let imageCache = NSCache<NSURL, UIImage>()

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .black

        setupScrollView()
        setupGesture()
        loadAndDisplayImage()
    }

    private func setupScrollView() {
        scrollView.frame = view.bounds
        scrollView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        scrollView.delegate = self
        scrollView.minimumZoomScale = 1.0
        scrollView.maximumZoomScale = 4.0
        view.addSubview(scrollView)

        imageView.contentMode = .scaleAspectFit
        imageView.frame = scrollView.bounds
        imageView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        scrollView.addSubview(imageView)
    }

    private func setupGesture() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissSelf))
        view.addGestureRecognizer(tapGesture)
    }

    @objc private func dismissSelf() {
        dismiss(animated: true)
    }

    private func loadAndDisplayImage() {
        // 1. –ï—Å–ª–∏ –µ—Å—Ç—å image –Ω–∞–ø—Ä—è–º—É—é ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        if let directImage = image {
            imageView.image = directImage
            return
        }

        // 2. –ï—Å–ª–∏ –µ—Å—Ç—å URL ‚Äî –≥—Ä—É–∑–∏–º –ø–æ –Ω–µ–º—É —Å –∫–µ—à–µ–º
        if let url = imageUrl {
            if let cached = Self.imageCache.object(forKey: url as NSURL) {
                imageView.image = cached
                return
            }
            loadImage(from: url)
            return
        }

        // 3. –ï—Å–ª–∏ –µ—Å—Ç—å itemId ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å URL –∏–∑ Realm –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        if let id = itemId,
           let item = realm.object(ofType: Item.self, forPrimaryKey: id),
           !item.testPic.isEmpty {  // –∑–∞–º–µ–Ω–∏–ª–∏ if let –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
            let baseURL = imageBaseURL.hasSuffix("/") ? imageBaseURL : imageBaseURL + "/"
            let sanitizedSize = posterSize.hasSuffix("/") ? String(posterSize.dropLast()) : posterSize
            let cleanedPath = item.testPic.hasPrefix("/") ? String(item.testPic.dropFirst()) : item.testPic
            let urlString = baseURL + sanitizedSize + "/" + cleanedPath

            guard let url = URL(string: urlString) else {
                imageView.image = UIImage(named: "placeholder")
                return
            }

            if let cached = Self.imageCache.object(forKey: url as NSURL) {
                imageView.image = cached
            } else {
                loadImage(from: url)
            }
            return
        }

        // 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        imageView.image = UIImage(named: "placeholder")
    }

    private func loadImage(from url: URL) {
        imageView.image = UIImage(named: "placeholder")
        print("üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(url.absoluteString)")

        URLSession.shared.dataTask(with: url) { [weak self] data, _, error in
            guard let self = self,
                  let data = data,
                  let downloadedImage = UIImage(data: data) else {
                DispatchQueue.main.async {
                    self?.imageView.image = UIImage(named: "placeholder")
                }
                return
            }

            Self.imageCache.setObject(downloadedImage, forKey: url as NSURL)

            DispatchQueue.main.async {
                self.imageView.image = downloadedImage
            }
        }.resume()
    }

    // MARK: - UIScrollViewDelegate

    func viewForZooming(in scrollView: UIScrollView) -> UIView? {
        return imageView
    }
}
